/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.floatingwidget;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.provider.Settings;

import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.kroll.common.TiMessenger;

@Kroll.module(name = "Floatingwidget", id = "ti.floatingwidget", propertyAccessors = { "onResult" })
public class FloatingwidgetModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "FloatingwidgetModule";
	private static final int SYSTEM_ALERT_WINDOW_PERMISSION = 2084;

	@Kroll.constant
	public static final int RESULT_OK = Activity.RESULT_OK;
	@Kroll.constant
	public static final int RESULT_CANCELED = Activity.RESULT_CANCELED;

	public FloatingwidgetModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {

	}

	private final class PermissionResultHandler implements TiActivityResultHandler {
		public void onError(Activity arg0, int arg1, Exception e) {
			Log.e(LCAT, e.getMessage());
		}

		public void onResult(Activity dummy, int requestCode, int resultCode, Intent data) {
			if (requestCode == SYSTEM_ALERT_WINDOW_PERMISSION) {
				// or in this
				// https://riptutorial.com/android/example/24633/granting-system-alert-window-permission-on-android-6-0-and-above
				KrollDict res = new KrollDict();
				res.put("result", resultCode);
				res.put("success", resultCode == Activity.RESULT_OK ? true : false);
				if (hasProperty("onResult")) {
					KrollFunction onResult = (KrollFunction) (getProperty("onResult"));
					onResult.callAsync(getKrollObject(), res);
				}
				if (hasListeners("result"))
					fireEvent("result", res);
			}
		}
	}

	@Kroll.method
	public void requestPermission() {
		final Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
				Uri.parse("package:" + TiApplication.getAppCurrentActivity().getPackageName()));
		final TiActivitySupport activitySupport = (TiActivitySupport) TiApplication.getInstance().getCurrentActivity();
		if (TiApplication.isUIThread()) {
			activitySupport.launchActivityForResult(intent, SYSTEM_ALERT_WINDOW_PERMISSION,
					new PermissionResultHandler());
		} else {
			TiMessenger.postOnMain(new Runnable() {
				@Override
				public void run() {
					activitySupport.launchActivityForResult(intent, SYSTEM_ALERT_WINDOW_PERMISSION,
							new PermissionResultHandler());
				}
			});
		}
	}
}
